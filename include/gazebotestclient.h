/**
 * THIS FILE IS GENERATED BY jsonrpcstub, DO NOT CHANGE IT!!!!!
 */

#ifndef _GAZEBOTESTCLIENT_H_
#define _GAZEBOTESTCLIENT_H_

#include <jsonrpc/rpc.h>

class GazeboTestClient
{
    public:
        GazeboTestClient(jsonrpc::AbstractClientConnector* conn)
        {
            this->client = new jsonrpc::Client(conn);
        }
        ~GazeboTestClient()
        {
            delete this->client;
        }

        Json::Value getLinkEventHistory(const std::string& jointName, const std::string& linkName, const std::string& modelName) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["jointName"] = jointName; 
p["linkName"] = linkName; 
p["modelName"] = modelName; 

            Json::Value result = this->client->CallMethod("getLinkEventHistory",p);
    if (result.isArray())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value getPosition(const std::string& object) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["object"] = object; 

            Json::Value result = this->client->CallMethod("getPosition",p);
    if (result.isArray())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        double getSimtime() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->client->CallMethod("getSimtime",p);
    if (result.isDouble())
        return result.asDouble();
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        bool loadWorld(const std::string& world) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["world"] = world; 

            Json::Value result = this->client->CallMethod("loadWorld",p);
    if (result.isBool())
        return result.asBool();
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        bool monitorLinkEvents(const std::string& jointName, const std::string& linkName, const std::string& modelName) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["jointName"] = jointName; 
p["linkName"] = linkName; 
p["modelName"] = modelName; 

            Json::Value result = this->client->CallMethod("monitorLinkEvents",p);
    if (result.isBool())
        return result.asBool();
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        bool onObject(const std::string& object, const std::string& surface) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["object"] = object; 
p["surface"] = surface; 

            Json::Value result = this->client->CallMethod("onObject",p);
    if (result.isBool())
        return result.asBool();
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        void resetWorld() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            this->client->CallNotification("resetWorld",p);
        }

    private:
        jsonrpc::Client* client;
};
#endif //_GAZEBOTESTCLIENT_H_
